/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as ProtectedSecretImport } from './routes/_protected/secret'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AuthRegisterLazyImport = createFileRoute('/_auth/register')()
const AuthLogInLazyImport = createFileRoute('/_auth/log-in')()

// Create/Update Routes

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/_auth/register.lazy').then((d) => d.Route),
)

const AuthLogInLazyRoute = AuthLogInLazyImport.update({
  id: '/log-in',
  path: '/log-in',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/_auth/log-in.lazy').then((d) => d.Route))

const ProtectedSecretRoute = ProtectedSecretImport.update({
  id: '/secret',
  path: '/secret',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/secret': {
      id: '/_protected/secret'
      path: '/secret'
      fullPath: '/secret'
      preLoaderRoute: typeof ProtectedSecretImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_auth/log-in': {
      id: '/_auth/log-in'
      path: '/log-in'
      fullPath: '/log-in'
      preLoaderRoute: typeof AuthLogInLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLogInLazyRoute: typeof AuthLogInLazyRoute
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLogInLazyRoute: AuthLogInLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ProtectedRouteRouteChildren {
  ProtectedSecretRoute: typeof ProtectedSecretRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedSecretRoute: ProtectedSecretRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/secret': typeof ProtectedSecretRoute
  '/log-in': typeof AuthLogInLazyRoute
  '/register': typeof AuthRegisterLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/secret': typeof ProtectedSecretRoute
  '/log-in': typeof AuthLogInLazyRoute
  '/register': typeof AuthRegisterLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/secret': typeof ProtectedSecretRoute
  '/_auth/log-in': typeof AuthLogInLazyRoute
  '/_auth/register': typeof AuthRegisterLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/secret' | '/log-in' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/secret' | '/log-in' | '/register'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/_protected/secret'
    | '/_auth/log-in'
    | '/_auth/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.ts",
      "children": [
        "/",
        "/_auth",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/log-in",
        "/_auth/register"
      ]
    },
    "/_protected": {
      "filePath": "_protected/route.tsx",
      "children": [
        "/_protected/secret"
      ]
    },
    "/_protected/secret": {
      "filePath": "_protected/secret.tsx",
      "parent": "/_protected"
    },
    "/_auth/log-in": {
      "filePath": "_auth/log-in.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
